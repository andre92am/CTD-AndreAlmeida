@import url('https://fonts.googleapis.com/css2?family=Manrope:wght@400;700&display=swap');
@import '_responsividade';

*{
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  scroll-behavior: smooth;
}

body{
  font-family: 'Manrope', sans-serif;

}

.modal-dialog{

  align-items: center;
  top: 50%;
  position: relative;
  padding: 10px;
  
 
}

.wrapper {
    /* O elemento precisa ter uma altura definida para o efeito
    funcionar.
       100vh significa 100% da altura da view.
    */
    height: 100vh;
    padding: 10px;
    
    /* O tamanho das imagens irá criar uma barra de rolagem 
    horizontal. Iremos desativar isso */
    overflow-x: none;
  
    /* A propriedade perspective indica a "distância" entre o 
    usuário e o plano Z.
    Quanto maior o valor, mais perto o elemento estará do usuário.
    Se for um valor negativo,
    mais distante esse elemento estará.
    */
    perspective: 2px;
    
    /* O transform-style indica se os elementos filhos devem ser 
    transformados em um plano 2D ou 3D.
    O valor preserve-3d indica que os elementos devem seguir o 
    espaço 3D indicado.
    */
    transform-style: preserve-3d;
  }
  
  .section {
    /* Indicamos "relative" para depois podermos
    posicionar os elementos filhos com "absolute" */
    position: relative;
    z-index: -1;
   
    /* Indicamos uma altura para a nossa seção. O valor não 
    importa muito.
    Para garantir um bom efeito, coloquei também uma altura 
    mínima de 700px;
    */
    height: 90vh;
    min-height: 300px;
    
    /* Para manter a transformação em espaço 3D, indicamos o mesmo 
    valor do elemento pai (preserve-3d).
    Para não precisar repetir o valor "preserve-3d", você pode usar 
    o valor "inherit", que fará
    com que ele pegue o valor do elemento pai.
    */
    transform-style: inherit; 
  }
  
  .section::before {
    /* Aqui nós iremos configurar a imagem que irá aparecer no fundo
    da seção.
    Como vimos, o Parallax precisa de elementos diferentes, então 
    não daria certo se colocássemos o fundo diretamente na 
    <section>. Então criaremos um pseudo-elemento para isso.
    */
    
    /* Isso servirá para que o pseudo-elemento possua as mesmas
    dimensões do elemento <section> */
    content: " ";
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    
    /* O z-index negativo irá garantir que a imagem não fique por 
    cima de outros elementos */ 
    z-index: -1;
    
    /* Aqui estamos fazendo com que a imagem de fundo cubra todo o
    elemento */
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center center;
    
    /* Aqui está a brincadeira. Lembra que o nosso "wrapper" está
    mais próximo do usuário?
    Aqui nós faremos com que o nosso pseudo-elemento, que está com
    a imagem de fundo, fique mais longe do usuário. Para isso, 
    basta passar um valor negativo para "translateZ()".
    
    Como a imagem irá para longe do usuário, ela parecerá menor. 
    Então usamos o "scale()" para aumentar o tamanho da imagem.
    
    Como o elemento estará mais longe do usuário, ele irá se mover
    mais lentamente do que os elementos mais próximos conforme 
    a gente role a página.
    */
    transform: translateZ(-1px) scale(1.5);
  }
  
  .text{
    /* Essa classe, como dito antes, é só para o nosso conteúdo.
    Sinta-se livre para criar o que quiser.
    */
    position: absolute;
    top: 40%;
    width: 100%;
    padding: 20px 0;
    background-color: rgba(255, 255, 255,0.5);
  
    color: white;
    text-shadow: 0 0 5px #000;
    font-size: 20px;
    text-align: center;
  }
  
  /* Em nosso pseudo-elemento, configuramos a imagem de fundo,
  mas não indicamos qual será a imagem.
    Isso nos permite poder criar outras classes para indicar 
    uma imagem diferente para cada <section>.
  */
  .bg1::before {
    background-image: url('../img/slider.jpeg');
  }
  
  header{
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  position: sticky;
  top: 0;
  background: #a1070f;
  color: white;
  padding: 10px;
  z-index:9999;
}

#logo{
  width: 20%;
  height: 12vh;
}


h1{
  font-size: 30px;

  &::first-letter{
    color: red;
  }
}

h2, h3{
  text-align: center;
  padding: 15px 0;
 font-family:'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
}


header ul{
  display: flex;
  gap: 5px;

  li {
      list-style-type: none;

      a{
        text-decoration: none;
        color: white;
        padding: 10px;
        border-radius: 9px;
        font-weight: bold;
        transition: all .3s ease-in-out;

      &:hover{
        background-color: red;
        color: black;
      }
    }    
  }
}

.card-deck{
    display: flex;
}

.card {
    padding: 10px;
    border: none;
}

@keyframes fadein {
  from { opacity: 0; }
  to   { opacity: 1; }
}

.card:hover {
    border: 1px solid;
    animation: fadein 1s;
    
}


iframe#tubecritica1{
        
        display: flex;
        align-items: center;
        margin: 2px;
        width: 90%;
        height: 350px;
}

#logogit {
  width: 25px;
  height: 25px;
}

/* Responsividade */


@media(min-width: 344px) and (max-width: 492px){

  header {
      flex-direction: column;
    
      h1{
        margin-bottom: 20px;
      }

      li{
        margin-bottom: 10px;
      }
    }
}

@media(max-width: 343px){
  header li a{
    padding: 5px;
  }

  main{
    padding: 15px 30px;
  }
}